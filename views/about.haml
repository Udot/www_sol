%div.row
  %div.span16.columns
    %h2 What is Sol
    %p
      Sol is in an early stage of development, you should check the 
      %a{:href => "http://github.com/Udot"} github
      page of Udot to check the modules which have already been published.

%div.row
  %div.span16.columns
    %h3 Chef
    
    %p
      Chef provides an easy to build and maintain the hosts that power up a Sol infrastructure. It is the way we use to create and deploy the modules environment and some of the modules. Publishing the entire cookbook used will probably take some time, but undoubtly it will have to be done. With it, will also come packaging scripts for modules like harry, cuddy, pinpin and jupiler (fpm based scripts).
    %p
      I'm not a chef master and I don't know Puppet, a friend of mine who knows both told me that Chef might be the tool for me, so I tried and it works so I sticked with it. Yet, Chef is only used here to build up the infrastructure so Puppet or another tool would do if you know what you are doing. The code to spawn servers is not here yet, so can't tell how much linked to Chef it will be. But soon, very soon, I will be.

%div.row
  %div.span16.columns
    %h3 Modules
    %p
      Sol is splitted into several modules :

    %h4 harry
    %p
      Harry is the back office app builder. It's the one that package the back office apps (mercury, and the main app) and make it ready to deploy. It is not using
      %em bundler
      to manage its dependencies since it call it to bundle the apps' dependencies when he packs them. For that Harry relies on its user rvm environment. Harry is not really production ready, it's mainly used to build the back office stuff at the moment.
    %h4 cuddy
    %p Cuddy is the deployer one, at the moment only the backoffice part works. As does Harry, Cuddy relies on its user rvm environment since it starts up the apps using bundler. Each hosting node must have one instance of cuddy running. Each Cuddy got a unique token allowing him to get his own queue in the Redis server. Cuddy needs to be builded as a package and deployed into your modules that way.
    %h4 mercury
    %p Mercury is the module that creates, checks, and destroys git repositories when needed. It's a Sinatra app and relies on bundler. It is called by the main app to create, or destroy repositories, or to get their status, or to deploy ssh keys. Mercury and jupiler must be on the same node.
    %h4 pinpin
    %p Pinpin is an app builder and packager.
    %h4 jupiler
    %p Jupiler is the git entry point, it's the gate keeper saying who is coming in or not. It is ruby app and relies on bundler for its dependencies. It also relies on the main app to know if a user (using ssh key) is allowed to push to a repository. Like cuddy, it must be packaged.


%div.row
  %div.span16.columns
    %h3 Packages
    %p
      Sysadmins will tell you that having compilers on a production server is a big
      %strong no no
      and they are right. So to avoid having such a bad situation, Sol rely on build nodes that are away from the front lines happyliy assembling the packages to be deployed. That way cuddy just have to pull from a Cloud storage zone, untar and call unicorn to start the app.

%div.row
  %div.span16.columns
    %h3 Dashboard
    %p The main hub will, mainly, be a dashboard to manage ssh keys and apps : create, destroy, see who is up, down, scale up or down an app etc ...